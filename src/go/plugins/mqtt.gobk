package plugins

import (
	"fmt"

	"frank/src/go/config"
	"frank/src/go/helpers/log"
	"frank/src/go/models"

	"gosrc.io/mqtt"
	"strings"
)

type PluginMqtt struct {
}

func NewPluginMqtt() PluginMqtt {
	pf := PluginMqtt{}
	client := mqtt.NewClient("tcp://localhost:1883")
	client.ClientID = "MQTT-Frank"
	log.Log.Debugf("Connecting on: %s\n", client.Address)


	messages := make(chan mqtt.Message)
	client.Messages = messages

	postConnect := func(c *mqtt.Client) {
		log.Println("Connected")
		name := "/mremond/test-topic-1"
		topic := mqtt.Topic{Name: name, QOS: 0}
		c.Subscribe(topic)
	}

	cm := mqtt.NewClientManager(client, postConnect)
	cm.Start()

	for m := range messages {
		log.Printf("Received message from MQTT server on topic %s: %+v\n", m.Topic, m.Payload)
	}
	return pf
}

func (ctx *PluginMqtt) ExecAction(action models.Action, extraText map[string]string) {
	if action.DeviceName == "" {
		log.Log.Debug("no device")
		go HttpHandler(action, extraText)
		return
	}

	device, err := config.GetDevice(action.DeviceName)
	if err != nil {
		log.Log.Error(err.Error())
		return
	}
	log.Log.Debugf("Interacting with device '%s' doing '%s'", device.Name, action.Name)
	go HttpHandlerDevice(action, device, extraText)
}

func HttpHandler(action models.Action, extraText map[string]string) {
	log.Log.Debug(fmt.Sprintf("%s", action.Action["action"]))
	_, err := req.Get(fmt.Sprintf("%s", action.Action["action"]))
	if err != nil {
		log.Log.Error(err.Error())
	}
}

func HttpHandlerDevice(action models.Action, device models.Device, extraText map[string]string) {
	url := strings.Replace(device.Connection.Address, "%", "%%", -1)
	log.Log.Debug(fmt.Sprintf("%+v", action.Action))
	log.Log.Debug(fmt.Sprintf("%+v", action.Action["action"]))
	log.Log.Debug(fmt.Sprintf("%s%s", url, action.Action["action"]))
	r, err := req.Get(fmt.Sprintf("%s%s", url, action.Action["action"]))
	if err != nil {
		log.Log.Error(err.Error())
	}

	log.Log.Debug(r.ToString())
}
